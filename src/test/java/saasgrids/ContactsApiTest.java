/*
 * Saasgrids CRM grid
 * Saasgrids CRM grid
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@saasgrids.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package saasgrids;

import crms.ApiException;
import saasgrids.Contact;
import saasgrids.InlineResponse2002;
import saasgrids.InlineResponse2003;
import saasgrids.InlineResponse2004;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Creates a new contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        String userId = null;
        Contact body = null;
        Contact response = api.createContact(userId, body);

        // TODO: test validations
    }
    
    /**
     * Delete contact by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactByIdTest() throws ApiException {
        String userId = null;
        api.deleteContactById(userId);

        // TODO: test validations
    }
    
    /**
     * Get all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllContactsTest() throws ApiException {
        String userId = null;
        String email = null;
        InlineResponse2003 response = api.getAllContacts(userId, email);

        // TODO: test validations
    }
    
    /**
     * Get all contacts by filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByFilterTest() throws ApiException {
        String userId = null;
        String filterId = null;
        String limit = null;
        String skip = null;
        InlineResponse2004 response = api.getContactByFilter(userId, filterId, limit, skip);

        // TODO: test validations
    }
    
    /**
     * Get contact by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByIdTest() throws ApiException {
        String userId = null;
        String contactId = null;
        Contact response = api.getContactById(userId, contactId);

        // TODO: test validations
    }
    
    /**
     * Get all contact filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactFiltersTest() throws ApiException {
        String userId = null;
        InlineResponse2002 response = api.getContactFilters(userId);

        // TODO: test validations
    }
    
    /**
     * Update contact by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactByIdTest() throws ApiException {
        String userId = null;
        Contact body = null;
        api.updateContactById(userId, body);

        // TODO: test validations
    }
    
}
